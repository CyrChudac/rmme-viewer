// USED TO DISPLAY FILES LIST AND VIEWS LIST

// Base class
//
// Easily usable on <ul>, <ol>, or <div>.

/*
.list-group {
  display: flex;
  flex-direction: column;

  // No need to set list-style: none; since .list-group-item is block level
  padding-left: 0; // reset padding because ul and ol
  margin-bottom: 0;
}


// Interactive list items
//
// Use anchor or button elements instead of `li`s or `div`s to create interactive
// list items. Includes an extra `.active` modifier class for selected items.

//removing this messes up the text in the boxes

.list-group-item-action {
  width: 100%; // For `<button>`s (anchors become 100% by default though)
  color: $list-group-action-color;
  text-align: inherit; // For `<button>`s (anchors inherit)

  // Hover state
  @include hover-focus() {
    z-index: 1; // Place hover/focus items above their siblings for proper border styling
    color: $list-group-action-hover-color;
    text-decoration: none;
    background-color: $list-group-hover-bg;
  }

  &:active {
    color: $list-group-action-active-color;
    background-color: $list-group-action-active-bg;
  }
}


// Individual list items
//
// Use on `li`s or `div`s within the `.list-group` parent.

.list-group-item {
  position: relative;
  display: block;
  padding: $list-group-item-padding-y $list-group-item-padding-x;
  color: $list-group-color;
  background-color: $list-group-bg;
  border: $list-group-border-width solid $list-group-border-color;

  &:first-child {
    @include border-top-radius($list-group-border-radius);
  }

  &:last-child {
    @include border-bottom-radius($list-group-border-radius);
  }

  &.disabled,
  &:disabled {
    color: $list-group-disabled-color;
    pointer-events: none;
    background-color: $list-group-disabled-bg;
  }

  // Include both here for `<a>`s and `<button>`s
  &.active {
    z-index: 2; // Place active items above their siblings for proper border styling
    color: $list-group-active-color;
    background-color: $list-group-active-bg;
    border-color: $list-group-active-border-color;
  }

  & + & {
    border-top-width: 0;

    &.active {
      margin-top: -$list-group-border-width;
      border-top-width: $list-group-border-width;
    }
  }
}

// Contextual variants
//
// Add modifier classes to change text and background color on individual items.
// Organizationally, this must come after the `:hover` states.

@each $color, $value in nth($themes, -1) {
  @include list-group-item-variant($color, theme-color-level($color, -9), theme-color-level($color, 6));
}
*/

@function themes-color($num: 1, $key: "right") {
  $theme: nth($list: $themes, $n: -$num);
  @return map-get($theme, $key);
}

@function themes-color-level($num: 1, $color-name: "right", $level: 0) {
  $color: themes-color($num, $color-name);
  $color-base: if($level > 0, $black, $white);
  $level: abs($level);

  @return mix($color-base, $color, $level * $theme-color-interval);
}

@mixin c-list-group-item-variant($num, $state, $background, $color) {
  .c-list-group-item-#{$num}-#{$state} {
    color: $color;
    background-color: $background;
    cursor: pointer;
    padding-top: 1rem;
    text-align: left;
    width: 87%;
    margin-left: 1%;
    margin-right: 1%;
    padding-left: 0.35rem;
    padding-left: 0.35rem;
    white-space: nowrap;

    &:hover {
      background-color: darken($background, 10%);
    }
  }
  .c-list-group-item-#{$num}-#{$state}-active {
    @extend .c-list-group-item-#{$num}-#{$state};
    background-color: darken($background, 20%);
  }
}

@for $i from 1 through length($themes){ 
  @each $variant, $value in nth($themes, -$i) {
    @include c-list-group-item-variant($i, 
      $variant,
      themes-color-level($i, $variant, -9),
      themes-color-level($i, $variant, 6)
    );
  }
}